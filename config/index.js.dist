/** 
 * Enable strict mode. See:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode
 * for more information.
 */
'use strict';

/**
 * The Windows service information.
 */
exports.service = {
  'serviceName': '',
  'displayName': ''
}

/**
 * Define whether we're running two systems ('dual') or one ('single').
 */
exports.mode = 'dual';

/**
 * The 'live' database connection information.
 */
exports.connection = {
  'liveServer': '',
  'liveInstanceName': '',
  'liveUserName': '',
  'livePassword': '',
  'options': { 'encrypt': true, 'liveDatabase': '', 'requestTimeout': 0, 'rowCollectionOnRequestCompletion': false },
  'liveReportsUserName': '',
  'liveLm_password': '',
  'liveNt_password': ''
};


/**
 * The 'training' database connection information.
 */
exports.connectionTraining = {
  'trainingServer': '',
  'trainingInstanceName': '',
  'trainingUserName': '',
  'trainingPassword': '',
  'options': { 'encrypt': true, 'trainingDatabase': '', 'requestTimeout': 0, 'rowCollectionOnRequestCompletion': false },
  'trainingReportsUserName': '',
  'trainingLm_password': '',
  'trainingNt_password': ''
};

/**
 * The web server settings, i.e. the URL of the API.
 */
exports.server = {
  'scheme': 'https',
  'host': '',
  'port': ''
};

/**
 * Configuration of access tokens.
 *
 * expiresIn                - The time in seconds before the access token expires. Default is 1 hour.
 * calculateExpirationDate  - A simple function which returns the date and time at which the token is
 *                            going to expire in a SQL-friendly format.
 */
exports.token = {
  expiresIn: 3600,
  calculateExpirationDate: (seconds = this.token.expiresIn) =>
    new Date(Date.now() - ((new Date()).getTimezoneOffset() * 60000) + (seconds * 1000)).toISOString()
};

/**
 * Configuration of authorisation codes.
 * 
 * expiresIn                - The time in seconds before the authorisation code expires. Default is 5 minutes.
 * calculateExpirationDate  - A simple function which returns the date and time at which the token is
 *                            going to expire in a SQL-friendly format.
 */
exports.codeToken = {
  expiresIn: 300,
  calculateExpirationDate: (seconds = this.codeToken.expiresIn) =>
    new Date(Date.now() - ((new Date()).getTimezoneOffset() * 60000) + (seconds * 1000)).toISOString()
};

/**
 * Session configuration
 * 
 * secret - The session secret.
 */
exports.session = {
  'secret': ''
};
